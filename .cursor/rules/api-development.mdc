---
description: 
globs: 
alwaysApply: true
---
# API 开发核心规范

## 1. Pydantic 模型：仅用于文档，严禁校验 (ABSOLUTE RULE)

这是本项目 **最重要** 的API开发规则。

- **唯一目的**: 在FastAPI接口中，Pydantic模型（`response_model`）的 **唯一且绝对** 的用途是为Swagger UI (`/docs`) 和 ReDoc (`/redoc`) 自动生成清晰、准确的API文档。
- **严禁运行时使用**: **严禁** 依赖Pydantic模型在运行时进行任何形式的数据校验、过滤或类型转换。模型的存在不应影响接口的实际行为。
- **直接返回字典**: 接口 **必须** 直接返回从 `db_core` 或其他服务中获取的原始 `dict` 或 `list[dict]` 数据。**禁止** 将这些字典实例化为Pydantic模型对象再返回。

### 示例：正确的返回方式

```python
# 正确 ✅: 直接返回从数据库获取的字典
from api.models.common import ApiResponse
from api.models.knowledge import Insight # Insight模型仅用于文档
from etl.load import db_core

@router.get("/insights", response_model=ApiResponse[List[Insight]])
async def get_insights():
    result = await db_core.query_records("insights")
    return ApiResponse(
        code=200,
        message="成功",
        data=result.get("data", []) # 直接传递 list[dict]
    )
```

### 示例：被禁止的返回方式

```python
# 错误 ❌: 对返回数据进行了不必要的模型实例化
from api.models.knowledge import Insight

@router.get("/insights-bad")
async def get_insights_bad():
    result = await db_core.query_records("insights")
    insights_data = result.get("data", [])
    
    # --- 严禁以下操作 ---
    # FastAPI会自动处理文档，无需手动转换
    data_models = [Insight(**item) for item in insights_data] 
    
    return ApiResponse(data=data_models)
```

### 为什么执行此规则？
1.  **性能**: 避免了将数据库查询结果反序列化为字典后，再序列化为Pydantic模型对象所带来的不必要性能开销。
2.  **解耦**: 保持API逻辑与数据模型定义的解耦。接口的健壮性不应依赖于模型定义。
3.  **一致性**: 确保了项目范围内数据处理方式的一致性，所有数据源返回的都是原生Python字典。


## 2. 数据库交互

- **使用核心模块**: 所有数据库操作都 **必须** 通过 `etl.load.db_core` 中的异步函数进行。
- **禁止原生SQL**: **严禁** 在API路由中直接编写和执行原生的SQL查询字符串。

```python
import etl.load.db_core as db_core

result = await db_core.query_records(
    table_name="users",
    conditions={"status": "active"},
    limit=10
)
```

## 3. 日志记录

- **规范命名**: 每个API模块都 **必须** 使用 `register_logger` 创建独立的日志记录器。
- **命名模式**: `register_logger('api.routes.module.submodule')`

```python
from core.utils.logger import register_logger
logger = register_logger('api.routes.knowledge.insights')
```
