---
description: 
globs: 
alwaysApply: true
---
# Python 编码规范

本文档为 `nkuwiki` 项目的 Python 后端开发提供统一的编码和设计规范。

## 1. 基础规范

### 1.1. 代码风格
- **PEP 8**: 严格遵循 [PEP 8](mdc:https:/www.python.org/dev/peps/pep-0008) 代码风格指南。
- **格式化工具**: 使用 **Ruff** 进行代码的自动化格式化与检查，以统一风格并替代 `black`, `isort`, `flake8`。
- **行长度**: 最大行长度限制为 **88个字符**。
- **缩进**: 使用 **4个空格** 进行缩进，禁止使用Tab。

### 1.2. 类型提示 (强制)
- 所有函数、方法的参数和返回值都**必须**有明确的类型提示。
- 使用 `from typing import ...` 导入所有类型。

```python
from typing import List, Dict, Optional, Any
from pathlib import Path

def process_data(items: List[Dict[str, Any]]) -> Optional[Path]:
    # ...
    return Path("/path/to/result")
```

### 1.3. 命名规范
- **变量和函数**: 小写字母和下划线 (`snake_case`)。示例: `user_name`, `get_user_profile`。
- **类名**: 大驼峰式 (`CamelCase`)。示例: `DocumentProcessor`, `QdrantIndexer`。
- **常量**: 大写字母和下划线 (`SCREAMING_SNAKE_CASE`)。示例: `MAX_RETRIES`, `DEFAULT_TIMEOUT`。
- **私有成员**: 以单个下划线开头 (`_internal_method`)。

## 2. 模块与导入

### 2.1. 导入顺序
不同来源的模块导入应按以下顺序分组，并用空行隔开：
1.  **标准库**: `os`, `sys`, `datetime`, `asyncio`, `typing`
2.  **第三方库**: `fastapi`, `llama_index`, `aiofiles`
3.  **项目内模块**: `config`, `core.utils`, `etl.load`

```python
# 1. 标准库
import json
from pathlib import Path
from typing import List

# 2. 第三方库
from fastapi import APIRouter, Query

# 3. 项目内模块
from config import Config
from core.utils.logger import register_logger
from etl.load import db_core
```

### 2.2. 导入方式
- **推荐**: 明确导入需要的模块或函数。`from core.utils.logger import register_logger`。
- **禁止**: 禁止使用通配符导入 (`from module import *`)。

## 3. 日志规范 (强制)

### 3.1. 日志器创建
- 每个模块都必须创建自己独立的日志记录器。
- **必须**使用项目提供的 `register_logger` 工具函数。
- 推荐使用模块的 `__name__` 作为日志记录器的名称。

```python
from core.utils.logger import register_logger

# api/routes/knowledge/insights.py
logger = register_logger('api.routes.knowledge.insights')

# etl/daily_pipeline.py
logger = register_logger('etl.daily_pipeline')
```

### 3.2. 日志级别
- `logger.debug()`: 用于记录详细的调试信息，如变量值、函数入口/出口。
- `logger.info()`: 用于记录关键的业务流程节点，如服务启动、任务完成。
- `logger.warning()`: 用于记录可预期的、非致命的异常情况，如配置缺失但有默认值。
- `logger.error()`: 用于记录导致操作失败的错误，应包含异常信息。
- `logger.exception()`: 在 `except` 块中使用，它会自动附加当前的异常堆栈信息。

## 4. 项目核心实践

### 4.1. 配置管理
- 所有配置项（如数据库凭据、API密钥、路径等）都**必须**通过全局 `Config` 对象访问。
- **禁止**在代码中硬编码任何配置值。

```python
from config import Config

config = Config()
db_host = config.get("etl.data.mysql.host", "localhost")
api_key = config.get("core.agent.coze.api_key")
```

### 4.2. 数据库操作 (强制)
- 所有数据库交互都**必须**通过 `etl.load.db_core` 中的异步函数进行。
- `db_core` 封装了数据库连接池管理和异步执行，能有效防止阻塞事件循环。
- **严禁**在其他模块中直接创建数据库连接或执行原生SQL查询。

```python
# 正确用法
from etl.load import db_core

async def get_user(user_id: int):
    result = await db_core.query_records(
        "users",
        conditions={"id": user_id},
        limit=1
    )
    return result.get("data")[0] if result.get("data") else None
```

### 4.3. 异步编程
- 对于所有I/O密集型操作（文件读写、网络请求、数据库访问），**必须**使用 `async/await` 范式。
- 使用 `aiofiles` 进行异步文件操作，使用 `httpx` 或 `aiohttp` 进行异步网络请求。

### 4.4. 异常处理
- 倾向于捕获**具体的异常类型** (`ValueError`, `ConnectionError`)，而不是宽泛的 `Exception`。
- 在 `except` 块中记录详细的错误日志，最好使用 `logger.exception()`。
- 考虑为项目定义一些自定义异常类，以更好地区分不同类型的业务错误。

```python
# 自定义异常示例
class InsightGenerationError(Exception):
    """当生成洞察失败时抛出"""
    pass
```

## 5. 文档字符串

- 推荐使用 Google 风格的文档字符串，它清晰、可读，并能被 `Sphinx` 等工具良好地解析。

```python
def retrieve_documents(query: str, top_k: int = 10) -> List[Dict]:
    """根据查询检索相关文档。

    Args:
        query (str): 用户的查询语句。
        top_k (int): 需要返回的文档数量。

    Returns:
        List[Dict]: 包含文档内容和元数据的字典列表。

    Raises:
        ConnectionError: 如果无法连接到向量数据库。
    """
    # ... 实现 ...
    pass
```
