## 角色
你是一个卓越高效的编程助手, 用中文回答问题，不要过多解释，不要重复。

## 禁止

windows平台自己运行代码。

## 规范

代码简洁、高效，不要过长，不要加过多健壮性代码。
markdown代码遵循vscode的markdownlint规范。
一般情况日志使用debug级别，不要使用info级别，只有最重要的信息采用info级别。

配置参考config.py中的嵌套配置引用方式

## 项目描述

### 项目背景

nkuwiki校园知识共享平台

我们致力于构建南开知识共同体，践行 开源·共治·普惠 三位一体价值体系
（🔓 技术开源透明 + 🤝 社区协同共治 + 🆓 服务永久普惠），实现：

🚀 消除南开学子信息差距
💡 开放知识资源免费获取
🌱 构建可持续的互助社区

这是一个前后端分离的项目，主体是后端项目
services/app微信小程序，是git子模块，请求地址是http://113.44.175.112
api文档见每个子模块下的api目录下的md文件

### 项目结构树

```plaintext
- core # core模块，负责智能体对话、贡献激励、平台治理等算法应用
  - agent  # 智能体应用
    - coze  # Coze平台对接
      - coze_agent.py
    （openai,chatgpt,hiagent、etc.）
    - session_manager.py  # 会话管理器
    - agent_factory.py  # 智能体工厂
  - auth  # 处理认证和授权
  - bridge  # 桥接服务与智能体
  - utils  # 通用工具函数和类
    - plugins  # 插件管理系统
      - plugin_manager.py  # 插件管理器
    - common  # 通用工具库
    - voice  # 语音处理
    - translate  # 翻译工具
- docs  # 项目文档
  - logging_guide.md  # 日志指南
  - assets  # 文档资源
    - 技术报告.pdf
  - HiagentAPI  # HiAgent API文档
    - HiagentAPI.md
- etl  # etl模块，负责数据抽取、转换和加载
  - __init__.py  # etl模块全局共享配置项、环境变量、路径和工具函数
  - api  # 检索和生成服务的api
  - crawler  # 爬虫模块，负责从各种数据源抓取数据
    - base_crawler.py  # 基础爬虫类
    (website,wechat, market, etc.)
    - __init__.py  # 爬虫模块专用配置项、环境变量、路径和工具函数
  - transform  # 转换模块，负责数据格式转换、处理和清洗
    - transformation.py  # 转换工具
  - load  # 加载模块，将原始数据导出到索引数据,关系数据库（mysql）和向量数据库（qdrant）
    - mysql_tables # mysql建表语句
    - json2mysql.py  # JSON数据导入MySQL
    - pipieline.py # 文档索引建立、嵌入、检索、重排全流程
  - embedding  # 嵌入处理模块
    - hierarchical.py # 文档处理成节点树，建立索引
    - ingestion.py  # 文档分块、嵌入
    - hf_embeddings.py # 嵌入模型
  - retrieval  # 检索模块
    - retrivers.py # 稀疏/稠密/混合检索器
    - rerankders.py # 重排器
  - utils  # 工具
  - data # 数据持久化存储目录，gitignore，一般放在项目代码外，仅本地测试时放在项目中，可在config.json中配置挂载路径
    - cache  # 缓存目录，存储临时处理的数据
    - index  # 索引目录，存储建立的搜索索引
    - models  # 模型目录，存储下载的机器学习模型
    - mysql  # MySQL数据库目录，存储关系型数据
    - qdrant  # Qdrant向量数据库目录，存储向量检索数据
    - nltk  # NLTK数据目录，存储自然语言处理工具包数据
    - raw  # 原始数据目录，存储爬取的原始数据
- infra  # 基础设施
  - __init__.py
- services  # services模块，提供多渠道服务
  - wechatmp  # 微信公众号服务
    - active_reply.py  # 主动回复
    - passive_reply.py  # 被动回复
    - wechatmp_channel.py  # 微信公众号渠道
  - terminal  # 终端服务，调试用
  - website  # 网站服务
  - app # 微信小程序服务
  - channel_factory.py  # 渠道工厂
- requirements.txt  # 项目依赖文件
- app.py  # 应用程序入口
- config.py  # 全局配置管理类，包含所有可用配置项的注释和默认值
- config.json  # 配置文件，包含敏感信息，gitignore
- .cursors # cursor项目规则，推荐开发使用
```

### services/app

##### 项目结构

```plain text
services/app
│
├── pages/ # 页面文件夹
│   ├── index/ # 首页
│   │   ├── index.js # 页面逻辑
│   │   ├── index.json # 页面配置
│   │   ├── index.wxml # 页面结构
│   │   └── index.wxss # 页面样式
│   ├── search/ # 搜索页
│   ├── discover/ # 发现页
│   ├── profile/ # 个人中心
│   ├── login/ # 登录页
│   └── post/ # 发帖页
│
├── api/ # API接口封装
│   ├── agent_api.md # Agent API文档
│   ├── mysql_api.md # MySQL API文档
│   └── README.md # API说明文档
│
├── assets/ # 静态资源
│   └── icons/ # 图标文件
│
├── utils/ # 工具函数
│   └── util.js # 通用工具函数
│
├── cloudfunctions/ # 云函数
│   └── login/ # 登录相关云函数
│
├── typings/ # TypeScript类型定义
│
├── app.js # 小程序入口文件
├── app.json # 小程序全局配置
├── app.wxss # 全局样式
├── project.config.json # 项目配置文件
├── project.private.config.json # 项目私有配置
├── sitemap.json # 小程序搜索配置
├── jsconfig.json # JavaScript配置文件
└── .cursorrules # Cursor IDE配置文件
```

